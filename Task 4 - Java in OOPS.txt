// Encapsulation :

class Person {
    private String name; 
    public void setName(String newName) {
        name = newName;
    }

       public String getName() {
        return name;
    }
}

public class Encapsulation {
    public static void main(String[] args) {
        Person p = new Person();
        p.setName("Sara"); 
        System.out.println("Person's Name: " + p.getName());
    }
}


// Inheritance :

class Animal {
    void eat() {
        System.out.println("This animal eats food.");
    }
}

class Dog extends Animal {
    void bark() {
        System.out.println("The dog barks.");
    }
}

public class Inheritance {
    public static void main(String[] args) {
        Dog d = new Dog();
        d.eat(); 
        d.bark(); 
    }
}

// Method overriding :

class Vehicle {
    void run() {
        System.out.println("Vehicle is running");
    }
}

class Car extends Vehicle {
    void run() {
        System.out.println("Car is running at 100 km/h");
    }
}

public class Polymorphism {
    public static void main(String[] args) {
        Vehicle v = new Car(); 
        v.run(); 
    }
}

// Method overloading

class Operations {
       int add(int a, int b) {
        return a + b;
    }
    int add(int a, int b, int c) {
        return a + b + c;
    }
}

public class Overloading {
    public static void main(String[] args) {
        Operations math = new Operations();
        System.out.println("Sum of 2 numbers: " + math.add(5, 10));
        System.out.println("Sum of 3 numbers: " + math.add(5, 10, 15));
    }
}

// Abstraction :

abstract class Shape {
    abstract void draw(); // Abstract method (no body)
}

class Circle extends Shape {
    void draw() {
        System.out.println("Drawing a Circle");
    }
}

public class Abstraction {
    public static void main(String[] args) {
        Shape s = new Circle(); 
        s.draw(); 
    }
}


